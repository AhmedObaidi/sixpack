Building a Sixpack Client is pretty straight forward, though there are some basic standards we'd like you to follow.

Clients:

* The first argument in the list of alternatives should be handled internally as the 'control'
* Are responsible for generating and storing (in a cookie, session, MySQL, Redis, etc) unique client ids for each user.
    * All SeatGeek clients use UUIDs
* should pass IP addresses and user agents to Sixpack to avoid bots from participating in tests (where applicable)
* should have a consistant interface
    * helper methods that make using sixpack extremely easy in a templating language
    * convert and participate methods
* should gracefully handle server errors and responses
   * the participate method should return the (control) when Sixpack is unreachable
* should have a short timeout on the web requests
    * internally we've settled on 250ms, though this might change
* valid alternative and experiment names as valid strings
    * This is the current regex we're using ^[a-z0-9][a-z0-9\-_ ]*$ and is also enforced on the server
* should be reasonably tested
* should allow for the location of the sixpack server to be easily defined and changed
